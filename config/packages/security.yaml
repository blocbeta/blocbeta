security:
  encoders:
    App\Entity\User:
      algorithm: md5
      encode_as_base64: false
      iterations: 0

  providers:
    users:
      entity:
        class: 'App\Entity\User'

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern:  ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    public:
      request_matcher: App\RequestMatcher\PublicRequestMatcher
      anonymous: true

    api:
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
#    - { path: '^/api', roles: IS_AUTHENTICATED_FULLY }
#    - { path: '^/api/flashh/schedule/allocation', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/request-reset', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/reset', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/register', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/cancel-reservation', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/login', roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: '^/api/location', roles: IS_AUTHENTICATED_ANONYMOUSLY }


